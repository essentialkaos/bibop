#!/usr/bin/env bash

################################################################################

APP="bibop-dep"
VER="1.3.0"

################################################################################

NORM=0
BOLD=1
UNLN=4
RED=31
GREEN=32
YELLOW=33
BLUE=34
MAG=35
CYAN=36
GREY=37
DARK=90

# shellcheck disable=SC2034
CL_NORM="\e[${NORM}m"
# shellcheck disable=SC2034
CL_BOLD="\e[0;${BOLD};49m"
# shellcheck disable=SC2034
CL_UNLN="\e[0;${UNLN};49m"
# shellcheck disable=SC2034
CL_RED="\e[0;${RED};49m"
# shellcheck disable=SC2034
CL_GREEN="\e[0;${GREEN};49m"
# shellcheck disable=SC2034
CL_YELLOW="\e[0;${YELLOW};49m"
# shellcheck disable=SC2034
CL_BLUE="\e[0;${BLUE};49m"
# shellcheck disable=SC2034
CL_MAG="\e[0;${MAG};49m"
# shellcheck disable=SC2034
CL_CYAN="\e[0;${CYAN};49m"
# shellcheck disable=SC2034
CL_GREY="\e[0;${GREY};49m"
# shellcheck disable=SC2034
CL_DARK="\e[0;${DARK};49m"
# shellcheck disable=SC2034
CL_BL_RED="\e[1;${RED};49m"
# shellcheck disable=SC2034
CL_BL_GREEN="\e[1;${GREEN};49m"
# shellcheck disable=SC2034
CL_BL_YELLOW="\e[1;${YELLOW};49m"
# shellcheck disable=SC2034
CL_BL_BLUE="\e[1;${BLUE};49m"
# shellcheck disable=SC2034
CL_BL_MAG="\e[1;${MAG};49m"
# shellcheck disable=SC2034
CL_BL_CYAN="\e[1;${CYAN};49m"
# shellcheck disable=SC2034
CL_BL_GREY="\e[1;${GREY};49m"
# shellcheck disable=SC2034
CL_BIBOP="\e[38;5;85m"

################################################################################

PREFS_FILE="$HOME/.config/bibop-dep"
SUPPORTED_OPTS="enablerepo disablerepo !yes !no_color !help !version"
SHORT_OPTS="ER:enablerepo DR:disablerepo y:!yes nc:!no_color h:!help v:!version"
MERGEABLE_OPTS="enablerepo disablerepo"

################################################################################

transactions_dir="/var/tmp/bibop-dep-transactions"

################################################################################

# Main function
#
# *: All arguments passed to script
#
# Code: No
# Echo: No
main() {
  if [[ -n "$no_color" || -n "$NO_COLOR" ]] ; then
    unset NORM BOLD UNLN RED GREEN YELLOW BLUE MAG CYAN GREY DARK
    unset CL_NORM CL_BOLD CL_UNLN CL_RED CL_GREEN CL_YELLOW CL_BLUE CL_MAG CL_CYAN CL_GREY CL_DARK
    unset CL_BL_RED CL_BL_GREEN CL_BL_YELLOW CL_BL_BLUE CL_BL_MAG CL_BL_CYAN CL_BL_GREY CL_BL_DARK
    no_color=true
  fi

  if [[ -n "$version" ]] ; then
    about
    exit 0
  fi

  if [[ -n "$help" || $# -eq 0 ]] ; then
    usage
    exit 0
  fi

  if [[ $(id -u) != "0" ]] ; then
    error "You must run this script as root"
    exit 1
  fi

  prepare
  checkOptions
  doAction "$@"

  exit $?
}

# Prepare for running command
#
# Code: No
# Echo: No
prepare() {
  if [[ ! -e "$transactions_dir" ]] ; then
    mkdir -p "$transactions_dir"
  fi

  if [[ -f "/etc/dnf/dnf.conf" ]] ; then
    if grep -q 'keepcache' /etc/dnf/dnf.conf ; then
      sed -i 's/keepcache=.*/keepcache=True/' /etc/dnf/dnf.conf
    else
      echo "keepcache=True" >> /etc/dnf/dnf.conf
    fi
  else
    if grep -q 'keepcache' /etc/yum.conf ; then
      sed -i 's/keepcache=.*/keepcache=1/' /etc/yum.conf
    else
      echo "keepcache=1" >> /etc/yum.conf
    fi
  fi
}

# Check options before run
#
# Code: No
# Echo: No
checkOptions() {
  local repo

  for repo in "${enablerepo[@]}" ; do
    if ! yum repolist all | cut -f1 -d' ' | grep -qE "^${repo}$" ; then
      error "Can't enable repository \"${repo}\" — there is no repository with this name"
      return 1
    fi
  done

  for repo in "${disablerepo[@]}" ; do
    if ! yum repolist all | cut -f1 -d' ' | grep -qE "^${repo}$" ; then
      error "Can't disable repository \"${repo}\" — there is no repository with this name"
      return 1
    fi
  done
}

# Run action
#
# 1: Action (String)
# 2: Path to recipe (String)
#
# Code: Yes
# Echo: No
doAction() {
  local action="$1"
  local recipe="$2"

  case $action in
    "install"|"i"|"I")   installPackages "$recipe" ;;
    "reinstall"|"r"|"R") installPackages "$recipe" true ;;
    "uninstall"|"u"|"U") uninstallPackages ;;
    *)                   error "Unknown action $action" && return 1 ;;
  esac

  return $?
}

# Install packages required for recipe
#
# 1: Path to recipe (String)
# 2: Reinstall flag (Boolean)
#
# Code: Yes
# Echo: No
installPackages() {
  local recipe="$1"
  local reinstall="$2"

  local opts pkgs status tid

  if [[ -z "$recipe" || ! -e "$recipe" ]] ; then
    error "You must define path to recipe"
    return 1
  fi

  pkgs=$(bibop -L "$recipe" 2>/dev/null | tr '\n' ' ' | sed 's/ *$//')

  if [[ -z "$pkgs" ]] ; then
    show "This recipe doesn't have any dependencies" $YELLOW
    exit 0
  fi

  if [[ -z "$reinstall" ]] ; then
    show "\n${CL_BOLD}Installing packages:${CL_NORM} ${CL_CYAN}$pkgs${CL_NORM}\n"
  else
    show "\n${CL_BOLD}Reinstalling packages:${CL_NORM} ${CL_CYAN}$pkgs${CL_NORM}\n"
  fi

  opts=$(getYumOpts)

  # shellcheck disable=SC2086
  yum $opts clean expire-cache

  if [[ -z "$reinstall" ]] ; then
    # shellcheck disable=SC2086
    yum $opts install $pkgs
    status=$?
  else
    # shellcheck disable=SC2086
    yum $opts reinstall $pkgs
    status=$?
  fi

  if [[ $status -ne 0 ]] ; then
    return 1
  fi

  if [[ -z "$reinstall" ]] ; then
    tid=$(getLastHistoryRecordID)
    touch "$transactions_dir/$tid"
  fi

  return 0
}

# Unistall all packages installed by previous transaction
#
# Code: Yes
# Echo: No
uninstallPackages() {
  if [[ $(find "$transactions_dir" -maxdepth 1 -type f | wc -l) == "0" ]] ; then
    warn "There is no yum/dnf transactions to undo"
    return 1
  fi

  local tid opts

  opts=$(getYumOpts)

  # shellcheck disable=SC2044
  for tid in $(find "$transactions_dir" -type f -printf "%f\n") ; do
    # shellcheck disable=SC2086
    if ! yum $opts history undo "$tid" ; then
      return 1
    fi

    rm -f "$transactions_dir/$tid"
  done

  return 0
}

# Get ID of the latest transaction in history
#
# Code: No
# Echo: ID (Number)
getLastHistoryRecordID() {
  yum history list | grep -A2 'ID ' | tail -1 | tr -s ' ' | sed 's/^ \+//' | cut -f1 -d' '
}

# Returns options for Yum
#
# Code: No
# Echo: Options (String)
getYumOpts() {
  local opts

  if [[ -n "$enablerepo" ]] ; then
    opts="$opts --enablerepo=$enablerepo"
  fi

  if [[ -n "$disablerepo" ]] ; then
    opts="$opts --disablerepo=$disablerepo"
  fi

  if [[ -n "$yes" ]] ; then
    opts="$opts --assumeyes"
  fi

  echo "$opts"
}

################################################################################

# Show message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" && -z "$no_color" ]] ; then
    echo -e "\e[${2}m${1}\e[0m"
  else
    echo -e "$*"
  fi
}

# Print warning message
#
# 1: Message (String)
#
# Code: No
# Echo: No
warn() {
  show "▲ $*" $YELLOW 1>&2
}

# Print error message
#
# 1: Message (String)
#
# Code: No
# Echo: No
error() {
  show "▲ $*" $RED 1>&2
}

# Print usage info
#
# Code: No
# Echo: No
usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} $APP ${CL_GREEN}{options}${CL_NORM} ${CL_MAG}{action}${CL_NORM} <recipe>"
  show ""
  show "Actions" $BOLD
  show ""
  show "  ${CL_MAG}install${CL_NORM}, ${CL_MAG}i${CL_NORM} ${CL_DARK}....${CL_NORM} Install packages"
  show "  ${CL_MAG}reinstall${CL_NORM}, ${CL_MAG}r${CL_NORM} ${CL_DARK}..${CL_NORM} Reinstall packages"
  show "  ${CL_MAG}uninstall${CL_NORM}, ${CL_MAG}u${CL_NORM} ${CL_DARK}..${CL_NORM} Uninstall packages"
  show ""
  show "Options" $BOLD
  show ""
  show "  ${CL_GREEN}--enablerepo, -ER${CL_NORM} ${CL_GREY}repo${CL_NORM} ${CL_DARK}...${CL_NORM} Enable repository"
  show "  ${CL_GREEN}--disablerepo, -DR${CL_NORM} ${CL_GREY}repo${CL_NORM} ${CL_DARK}..${CL_NORM} Disable repository"
  show "  ${CL_GREEN}--yes, -y${CL_NORM} ${CL_DARK}................${CL_NORM} Automatically answer yes for all questions"
  show "  ${CL_GREEN}--no-color, -nc${CL_NORM} ${CL_DARK}..........${CL_NORM} Disable colors in output"
  show "  ${CL_GREEN}--help, -h${CL_NORM} ${CL_DARK}...............${CL_NORM} Show this help message"
  show "  ${CL_GREEN}--version, -v${CL_NORM} ${CL_DARK}............${CL_NORM} Show information about version"
  show ""
  show "Examples" $BOLD
  show ""
  show "  $APP install -ER kaos-testing myapp.recipe"
  show "  Install packages for myapp recipe with enabled kaos-testing repository" $DARK
  show ""
  show "  $APP install -ER kaos-testing,epel,cbr -y myapp.recipe"
  show "  Install packages for myapp recipe with enabled repositories" $DARK
  show ""
  show "  $APP uninstall"
  show "  Uninstall all packages installed by previous transaction" $DARK
  show ""
}

# Show info about version
#
# Code: No
# Echo: No
about() {
  show ""
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} — Script for installing/uninstalling ${CL_BIBOP}bibop${CL_NORM} recipe dependencies"
  show ""
  show "Copyright (C) 2009-$(date +%Y) ESSENTIAL KAOS" $DARK
  show "Apache License, Version 2.0 <https://www.apache.org/licenses/LICENSE-2.0>" $DARK
  show ""
}

# Show warning message about unsupported option
#
# 1: Option name (String)
#
# Code: No
# Echo: No
showOptWarn() {
  error "Unknown option $1"
  exit 1
}

## PREFS PARSING ###############################################################

unset arg argn argp

if [[ -n "$PREFS_FILE" && -r "$PREFS_FILE" ]] ; then
  while read -r arg ; do
    [[ "$arg" =~ ^\# ]] && continue
    arg="${arg/: /:}" ; argn="${arg%:*}" ; argn="${argn//-/_}" ; argp="${arg#*:}"
    [[ $SUPPORTED_OPTS\  =~ $argn\  ]] && declare "$argn=$argp"
  done < <(awk 1 "$PREFS_FILE")

  unset arg argn argp
fi

## OPTIONS PARSING 5 ###########################################################

if [[ $# -eq 0 ]] ; then
  main
fi

unset opt optn optm optv optt optk

optv="$*" ; optt=""

while [[ -n "$1" ]] ; do
  if [[ "$1" =~ \  && -n "$optn" ]] ; then
    declare "$optn=$1"

    unset optn && shift && continue
  elif [[ $1 =~ ^-{1}[a-zA-Z0-9]{1,2}+.*$ ]] ; then
    optm=${1:1}

    if [[ \ $SHORT_OPTS\  =~ \ $optm:!?([a-zA-Z0-9_]*) ]] ; then
      opt="${BASH_REMATCH[1]}"
    else
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ -z "$optn" ]] ; then
      optn=$opt
    else
      # shellcheck disable=SC2015
      [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
      optn=$opt
    fi

    if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
      declare "$optn=true" ; unset optn ; optk=true
    else
      unset optk
    fi

    shift && continue
  elif [[ "$1" =~ ^-{2}[a-zA-Z]{1}[a-zA-Z0-9_-]+.*$ ]] ; then
    opt=${1:2}

    if [[ $opt == *=* ]] ; then
      IFS="=" read -ra opt <<< "$opt"

      optm="${opt[0]}" ; optm=${optm//-/_}

      if [[ ! $SUPPORTED_OPTS\  =~ $optm\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${opt[0]//_/-}"
        shift && continue
      fi

      # shellcheck disable=SC2015
      [[ -n "${!optm}" && $MERGEABLE_OPTS\  =~ $optm\  ]] && declare "$optm=${!optm} ${opt[*]:1:99}" || declare "$optm=${opt[*]:1:99}"

      unset optm && shift && continue
    else
      # shellcheck disable=SC2178
      opt=${opt//-/_}

      if [[ -z "$optn" ]] ; then
        # shellcheck disable=SC2128
        optn=$opt
      else
        # shellcheck disable=SC2015
        [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
        # shellcheck disable=SC2128
        optn=$opt
      fi

      if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${optn//_/-}"
        shift && continue
      fi

      if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
        declare "$optn=true" ; unset optn ; optk=true
      else
        unset optk
      fi

      shift && continue
    fi
  else
    if [[ -n "$optn" ]] ; then
      # shellcheck disable=SC2015
      [[ -n "${!optn}" && $MERGEABLE_OPTS\  =~ $optn\  ]] && declare "$optn=${!optn} $1" || declare "$optn=$1"

      unset optn && shift && continue
    fi
  fi

  optt="$optt $1" ; shift
done

[[ -n "$optn" ]] && declare "$optn=true"

unset opt optn optm optk

# shellcheck disable=SC2015,SC2086
[[ -n "$KEEP_OPTS" ]] && main $optv || main ${optt:1}

################################################################################
