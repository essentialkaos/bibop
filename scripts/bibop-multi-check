#! /usr/bin/env bash

################################################################################

NORM=0
BOLD=1
UNLN=4
RED=31
GREEN=32
YELLOW=33
BLUE=34
MAG=35
CYAN=36
GREY=37
DARK=90

# shellcheck disable=SC2034
CL_NORM="\e[${NORM}m"
# shellcheck disable=SC2034
CL_BOLD="\e[0;${BOLD};49m"
# shellcheck disable=SC2034
CL_UNLN="\e[0;${UNLN};49m"
# shellcheck disable=SC2034
CL_RED="\e[0;${RED};49m"
# shellcheck disable=SC2034
CL_GREEN="\e[0;${GREEN};49m"
# shellcheck disable=SC2034
CL_YELLOW="\e[0;${YELLOW};49m"
# shellcheck disable=SC2034
CL_BLUE="\e[0;${BLUE};49m"
# shellcheck disable=SC2034
CL_MAG="\e[0;${MAG};49m"
# shellcheck disable=SC2034
CL_CYAN="\e[0;${CYAN};49m"
# shellcheck disable=SC2034
CL_GREY="\e[0;${GREY};49m"
# shellcheck disable=SC2034
CL_DARK="\e[0;${DARK};49m"
# shellcheck disable=SC2034
CL_BL_RED="\e[1;${RED};49m"
# shellcheck disable=SC2034
CL_BL_GREEN="\e[1;${GREEN};49m"
# shellcheck disable=SC2034
CL_BL_YELLOW="\e[1;${YELLOW};49m"
# shellcheck disable=SC2034
CL_BL_BLUE="\e[1;${BLUE};49m"
# shellcheck disable=SC2034
CL_BL_MAG="\e[1;${MAG};49m"
# shellcheck disable=SC2034
CL_BL_CYAN="\e[1;${CYAN};49m"
# shellcheck disable=SC2034
CL_BL_GREY="\e[1;${GREY};49m"

STATUS_OK=0
STATUS_ERROR=1
STATUS_VALIDATION_ERROR=2
STATUS_SKIPPED=3

################################################################################

APP="bibop-multi-check"
VER="1.1.0"
DESC="Utility for checking different versions of package"

################################################################################

SUPPORTED_OPTS="error_dir enablerepo disablerepo log !no_colors !help 
 !usage !version !ver"
SHORT_OPTS="e:error_dir ER:enablerepo DR:disablerepo l:log nc:!no_colors 
 h:!help v:!version"

################################################################################

SEPARATOR="--------------------------------------------------------------------------------"

################################################################################

log=""
pkgm_log=""

pass_count=0
fail_count=0

################################################################################

# Main func
#
# *: All unparsed arguments passed to the script
#
# Code: No
# Echo: No
main() {
  if [[ -n "$no_colors" || -n "$NO_COLOR" ]] ; then
    unset NORM BOLD UNLN RED GREEN YELLOW BLUE MAG CYAN GREY DARK
    unset CL_NORM CL_BOLD CL_UNLN CL_RED CL_GREEN CL_YELLOW CL_BLUE CL_MAG CL_CYAN CL_GREY CL_DARK
    unset CL_BL_RED CL_BL_GREEN CL_BL_YELLOW CL_BL_BLUE CL_BL_MAG CL_BL_CYAN CL_BL_GREY CL_BL_DARK
  fi

  if [[ -n "$ver" || -n "$version" ]] ; then
    about
    exit 0
  fi

  if [[ -n "$help" || -n "$usage" || $# -lt 2 ]] ; then
    usage
    exit 0
  fi

  local recipe="$1"
  local pkg_list="$2"

  checkEnv
  configureYUM
  cleanYumCache

  checkData "$recipe" "$pkg_list"
  runTests "$recipe" "$pkg_list"
}

# Check environment
#
# Code: No
# Echo: No
checkEnv() {
  if ! hasApp "bibop" ; then
    error "This app requires bibop utility"
    exit 1
  fi

  if ! hasApp "yum" ; then
    if ! hasApp "dnf" ; then
      error "This app requires YUM or DNF"
      exit 1
    fi
  fi

  if [[ $(id -u) != "0" ]] ; then
    error "This app requires root privileges"
    exit 1
  fi

  if [[ -f "/etc/dnf/dnf.conf" ]] ; then
    pkgm_log="/var/log/dnf.log"
  else
    pkgm_log="/var/log/yum.log"
  fi
}

# Check input data
#
# 1: Recipe file (String)
# 2: Package list file (String)
#
# Code: No
# Echo: No
checkData() {
  local recipe="$1"
  local pkg_list="$2"

  if [[ ! -e "$recipe" ]] ; then
    error "Recipe file $recipe doesn't exist"
    exit 1
  fi

  if [[ ! -f "$recipe" ]] ; then
    error "$recipe is not a recipe file"
    exit 1
  fi

  if [[ ! -s "$recipe" ]] ; then
    error "Recipe file $recipe is empty"
    exit 1
  fi

  if [[ ! -e "$pkg_list" ]] ; then
    error "Package list $pkg_list doesn't exist"
    exit 1
  fi

  if [[ ! -f "$pkg_list" ]] ; then
    error "$recipe is not a package list file"
    exit 1
  fi

  if [[ ! -s "$pkg_list" ]] ; then
    error "Package list $pkg_list is empty"
    exit 1
  fi
}

# Configure YUM/DNF to use cache
#
# Code: No
# Echo: No
configureYUM() {
  if [[ -f "/etc/dnf/dnf.conf" ]] ; then
    if grep -q 'keepcache' /etc/dnf/dnf.conf ; then
      sed -i 's/keepcache=.*/keepcache=True/' /etc/dnf/dnf.conf
    else
      echo "keepcache=True" >> /etc/dnf/dnf.conf
    fi
  else
    if grep -q 'keepcache' /etc/yum.conf ; then
      sed -i 's/keepcache=.*/keepcache=1/' /etc/yum.conf
    else
      echo "keepcache=1" >> /etc/yum.conf
    fi
  fi
}

# Run bibop test
#
# 1: Recipe file (String)
# 2: Package list file (String)
#
# Code: No
# Echo: No
runTests() {
  local recipe="$1"
  local pkg_list="$2"

  local recipe_name required_packages start_ts end_ts tests

  recipe_name=$(basename "$recipe")

  if [[ -z "$log" ]] ; then
    log="bibop-multi-check-$(date +'%Y%m%d%H%M').log"
  fi

  separator "$recipe_name"

  start_ts=$(now)

  while read -r required_packages ; do

    (( tests++ ))

    # shellcheck disable=SC2086
    runTest "$recipe" $required_packages

  done < <(cat "$pkg_list")

  separator

  end_ts=$(now)
  grace_time=$(getGraceTime "$start_ts" "$end_ts")

  show "  ${CL_BOLD}Duration:${CL_NORM} ${grace_time} ${CL_DARK}|${CL_NORM} ${CL_BOLD}Tests:${CL_NORM} ${tests} ${CL_DARK}|${CL_NORM} ${CL_BOLD}Passes:${CL_NORM} ${pass_count} ${CL_DARK}|${CL_NORM} ${CL_BOLD}Fails:${CL_NORM} ${fail_count}\n"

  log "Test suite finished (duration: ${grace_time} | pass: ${pass_count} | fail: ${fail_count})"
}

# Run test
#
# 1: Recipe file (String)
# *: Required packages
#
# Code: No
# Echo: No
runTest() {
  local recipe="$1"
  
  shift

  local required_packages="$*"
  local start_ts end_ts skip

  start_ts=$(now)

  printf "  %s: " "$required_packages"

  # shellcheck disable=SC2086
  if ! checkPackagesAvailability $required_packages ; then
    log "[ERROR] One or more required packages haven't found"
    printStatusBullet $STATUS_ERROR
    printStatusBullet $STATUS_SKIPPED
    printStatusBullet $STATUS_SKIPPED
    skip=true
  fi

  if [[ -z "$skip" ]] ; then
    # shellcheck disable=SC2086
    if ! installPackages $required_packages ; then
      printStatusBullet $STATUS_OK
    else
      printStatusBullet $STATUS_ERROR
      printStatusBullet $STATUS_SKIPPED
      printStatusBullet $STATUS_SKIPPED
      skip=true
    fi
  fi

  if [[ -z "$skip" ]] ; then
    execRecipe "$recipe"
    printStatusBullet $?

    uninstallPackages
    printStatusBullet $?
  fi

  log "$SEPARATOR"

  end_ts=$(now)
  grace_time=$(getGraceTime "$start_ts" "$end_ts")

  show "${CL_DARK} ($grace_time)${CL_NORM}"
}

# Execute bibop recipe
#
# 1: Recipe (String)
#
# Code: No
# Echo: No
execRecipe() {
  local recipe="$1"
  local opts status wrk_dir

  if [[ -n "$error_dir" ]] ; then
    opts="--error-dir $error_dir"
  fi

  wrk_dir=$(dirname "$recipe")

  log "Recipe validation…"

  # shellcheck disable=SC2086
  if bibop -q -D -d "$wrk_dir" $opts "$recipe" &>/dev/null ; then
    log "Recipe successfully validated"
  else
    log "[ERROR] Error while recipe validation"
    (( fail_count++ ))
    return $STATUS_VALIDATION_ERROR
  fi

  log "Running bibop tests…"

  # shellcheck disable=SC2086
  if bibop -q -d "$wrk_dir" $opts "$recipe" &>/dev/null ; then
    log "Tests successfully passed"
    (( pass_count++ ))
    return $STATUS_OK
  else
    log "[ERROR] Error while executing tests"
    (( fail_count++ ))
    return $STATUS_ERROR
  fi
}

# Check required packages availability
#
# *: List of required packages
#
# Code: Yes
# Echo: No
checkPackagesAvailability() {
  local opts pkg_list aval_list

  log "Checking files availability…"

  pkg_list=$(echo "$* " | sed 's: :\.* :g')

  if [[ -n "$enablerepo" ]] ; then
    opts="--enablerepo=$enablerepo"
  fi

  if [[ -n "$disablerepo" ]] ; then
    opts="--disablerepo=$disablerepo"
  fi

  # shellcheck disable=SC2086
  aval_list=$(LC_ALL=C yum -q $opts list availabile $pkg_list 2> /dev/null | grep -v 'Available Packages' | tr -s " " | sed 's/\.\(i386\|i686\|x86_64\|el6\|el7\|el7\)//g' | cut -f1,2 -d' ' | tr " " "-")

  if [[ -z "$aval_list" ]] ; then
    return 1
  fi

  if ! comm -3 <(echo "$aval_list") <(echo "$*") &> /dev/null ; then
    return 1
  fi

  return 0
}

# Install required packages
#
# *: List of required packages
#
# Code: Yes
# Echo: No
installPackages() {
  local opts pkg_count pkg_list

  log "Installing packages → $*"

  pkg_list=$(echo "$* " | sed 's/ /.*/g')

  if [[ -n "$enablerepo" ]] ; then
    opts="--enablerepo=$enablerepo"
  fi

  if [[ -n "$disablerepo" ]] ; then
    opts="--disablerepo=$disablerepo"
  fi

  truncate -s 0 "$pkgm_log"

  # shellcheck disable=SC2086
  if LC_ALL=C yum -q -y $opts install "$pkg_list" &>/dev/null ; then
    pkg_count=$(grep -c 'Installed:' "$pkgm_log")
    log "Packages successfully installed ($pkg_count installed)"
    return 0
  else
    log "[ERROR] Error while package install"
    (( fail_count++ ))
    return 1
  fi
}

# Uninstall required packages
#
# Code: Yes
# Echo: No
uninstallPackages() {
  local pkg_count

  log "Uninstalling packages…"

  truncate -s 0 "$pkgm_log"

  if yum -q -y history undo last &>/dev/null ; then
    pkg_count=$(grep -c 'Erased:' "$pkgm_log")
    log "Packages successfully uninstalled ($pkg_count uninstalled)"
    return $STATUS_OK
  else
    log "[ERROR] Error while package uninstall"
    (( fail_count++ ))
    return $STATUS_ERROR
  fi
}

# Clean yum cache
#
# Code: No
# Echo: No
cleanYumCache() {
  local opts

  if [[ -n "$enablerepo" ]] ; then
    opts="--enablerepo=$enablerepo"
  fi

  if [[ -n "$disablerepo" ]] ; then
    opts="--disablerepo=$disablerepo"
  fi

  # shellcheck disable=SC2086
  LC_ALL=C yum -q -y $opts clean expire-cache &>/dev/null
}

# Prints status bullet
#
# 1: Status (Number)
#
# Code: No
# Echo: No
printStatusBullet() {
  local status="$1"

  case $status in
    "$STATUS_OK")               printf "${CL_GREEN}%s${CL_NORM}" "•" ;;
    "$STATUS_ERROR")            printf "${CL_RED}%s${CL_NORM}" "•" ;;
    "$STATUS_VALIDATION_ERROR") printf "${CL_YELLOW}%s${CL_NORM}" "•" ;;
    "$STATUS_SKIPPED")          printf "${CL_DARK}%s${CL_NORM}" "•" ;;
  esac
}

# Get current time as unix timestamp
#
# Code: No
# Echo: Timestamp (Number)
now() {
  date '+%s'
}

# Get action time in grace format (3 min 32 sec)
#
# 1: Start timestamp (Number)
# 2: End timestamp (Number)
#
# Code: No
# Echo: No
getGraceTime() {
  local start end tim sec min

  start="$1"
  end="$2"
  tim=$((end - start))

  [[ -z "$tim" || "$tim" == "0" ]] && echo "0:01" && return

  sec=$((tim % 60))
  min=$(((tim - sec)/60))

  printf "%d:%02d" "$min" "$sec"
}

################################################################################

# Check if some app is installed
#
# 1: Binray name (String)
#
# Code: Yes
# Echo: No
hasApp() {
  type "$1" &> /dev/null
  return $?
}

# Print separator
#
# Code: No
# Echo: No
separator() {
  local name="$1"
  local i sep cols

  cols=$(tput cols)

  if [[ -n "$name" ]] ; then
    cols=$(( cols - ${#name} - 4 ))
  fi

  # shellcheck disable=SC2034
  for i in $(seq 1 "$cols") ; do
    sep="${sep}-"
  done

  if [[ -n "$name" ]] ; then
    show "\n--${CL_BOLD} $name ${CL_GREY}$sep\n" $GREY
  else
    show "\n$sep\n" $GREY
  fi
}

# Writes message to log file
#
# 1: Message (String)
#
# Code: No
# Echo: No
log() {
  if [[ -n "$cur_recipe" ]] ; then
    echo "[ $(date +'%Y/%m/%d %H:%M:%S.%3N') ] ($cur_recipe) $*" >> "$log"
  else
    echo "[ $(date +'%Y/%m/%d %H:%M:%S.%3N') ] $*" >> "$log"
  fi
}

# Show message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" && -z "$no_colors" ]] ; then
    echo -e "\e[${2}m${1}\e[0m"
  else
    echo -e "$*"
  fi
}

# Print error message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
error() {
  show "$@" $RED 1>&2
}

# Print usage info
#
# Code: No
# Echo: No
usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} $APP ${CL_GREEN}{options}${CL_NORM} recipe package-list"
  show ""
  show "Options" $BOLD
  show ""
  show "  ${CL_GREEN}--enablerepo, -ER${CL_NORM} ${CL_GREY}repo${CL_NORM} ${CL_DARK}...${CL_NORM} Enable repository"
  show "  ${CL_GREEN}--disablerepo, -DR${CL_NORM} ${CL_GREY}repo${CL_NORM} ${CL_DARK}..${CL_NORM} Disable repository"
  show "  ${CL_GREEN}--error-dir, -e${CL_NORM} ${CL_GREY}dir${CL_NORM} ${CL_DARK}......${CL_NORM} Path to directory with tests errors"
  show "  ${CL_GREEN}--log, -l${CL_NORM} ${CL_GREY}file${CL_NORM} ${CL_DARK}...........${CL_NORM} Path to log file"
  show "  ${CL_GREEN}--no-color, -nc${CL_NORM} ${CL_DARK}..........${CL_NORM} Disable colors in output"
  show "  ${CL_GREEN}--help, -h${CL_NORM} ${CL_DARK}...............${CL_NORM} Show this help message"
  show "  ${CL_GREEN}--version, -v${CL_NORM} ${CL_DARK}............${CL_NORM} Show information about version"
  show ""
  show "Examples" $BOLD
  show ""
  show "  $APP app.recipe package.list"
  show "  Run tests for every package in list" $DARK
  show ""
  show "  $APP --enablerepo=kaos-testing ~/tests/package1.recipe app.recipe package.list"
  show "  Run tests with enabled repository 'kaos-testing' for installing packages" $DARK
  show ""
}

# Show info about version
#
# Code: No
# Echo: No
about() {
  show ""
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - $DESC"
  show ""
  show "Copyright (C) 2009-$(date +%Y) ESSENTIAL KAOS" $DARK
  show "Apache License, Version 2.0 <https://www.apache.org/licenses/LICENSE-2.0>" $DARK
  show ""
}

# Show warning message about unsupported option
#
# 1: Option name (String)
#
# Code: No
# Echo: No
showOptWarn() {
  error "Unknown option $1" $RED
  exit 1
}

## OPTIONS PARSING 5 ###########################################################

if [[ $# -eq 0 ]] ; then
  main
  exit $?
fi

unset opt optn optm optv optt optk

optv="$*" ; optt=""

while [[ -n "$1" ]] ; do
  if [[ "$1" =~ \  && -n "$optn" ]] ; then
    declare "$optn=$1"

    unset optn && shift && continue
  elif [[ $1 =~ ^-{1}[a-zA-Z0-9]{1,2}+.*$ ]] ; then
    optm=${1:1}

    if [[ \ $SHORT_OPTS\  =~ \ $optm:!?([a-zA-Z0-9_]*) ]] ; then
      opt="${BASH_REMATCH[1]}"
    else
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ -z "$optn" ]] ; then
      optn=$opt
    else
      # shellcheck disable=SC2015
      [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
      optn=$opt
    fi

    if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
      declare "$optn=true" ; unset optn ; optk=true
    else
      unset optk
    fi

    shift && continue
  elif [[ "$1" =~ ^-{2}[a-zA-Z]{1}[a-zA-Z0-9_-]+.*$ ]] ; then
    opt=${1:2}

    if [[ $opt == *=* ]] ; then
      IFS="=" read -ra opt <<< "$opt"

      optm="${opt[0]}" ; optm=${optm//-/_}

      if [[ ! $SUPPORTED_OPTS\  =~ $optm\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${opt[0]//_/-}"
        shift && continue
      fi

      # shellcheck disable=SC2015
      [[ -n "${!optm}" && $MERGEABLE_OPTS\  =~ $optm\  ]] && declare "$optm=${!optm} ${opt[*]:1:99}" || declare "$optm=${opt[*]:1:99}"

      unset optm && shift && continue
    else
      # shellcheck disable=SC2178
      opt=${opt//-/_}

      if [[ -z "$optn" ]] ; then
        # shellcheck disable=SC2128
        optn=$opt
      else
        # shellcheck disable=SC2015
        [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
        # shellcheck disable=SC2128
        optn=$opt
      fi

      if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${optn//_/-}"
        shift && continue
      fi

      if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
        declare "$optn=true" ; unset optn ; optk=true
      else
        unset optk
      fi

      shift && continue
    fi
  else
    if [[ -n "$optn" ]] ; then
      # shellcheck disable=SC2015
      [[ -n "${!optn}" && $MERGEABLE_OPTS\  =~ $optn\  ]] && declare "$optn=${!optn} $1" || declare "$optn=$1"

      unset optn && shift && continue
    fi
  fi

  optt="$optt $1" ; shift
done

[[ -n "$optn" ]] && declare "$optn=true"

unset opt optn optm optk

# shellcheck disable=SC2015,SC2086
[[ -n "$KEEP_OPTS" ]] && main $optv || main ${optt:1}

################################################################################
