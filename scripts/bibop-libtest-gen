#! /usr/bin/env bash

################################################################################

APP="bibop-libtest-gen"
VER="2.0.2"
DESC="Utility for generating compilation tests for libraries"

################################################################################

NORM=0
BOLD=1
UNLN=4
RED=31
GREEN=32
YELLOW=33
BLUE=34
MAG=35
CYAN=36
GREY=37
DARK=90

# shellcheck disable=SC2034
CL_NORM="\e[${NORM}m"
# shellcheck disable=SC2034
CL_BOLD="\e[0;${BOLD};49m"
# shellcheck disable=SC2034
CL_UNLN="\e[0;${UNLN};49m"
# shellcheck disable=SC2034
CL_RED="\e[0;${RED};49m"
# shellcheck disable=SC2034
CL_GREEN="\e[0;${GREEN};49m"
# shellcheck disable=SC2034
CL_YELLOW="\e[0;${YELLOW};49m"
# shellcheck disable=SC2034
CL_BLUE="\e[0;${BLUE};49m"
# shellcheck disable=SC2034
CL_MAG="\e[0;${MAG};49m"
# shellcheck disable=SC2034
CL_CYAN="\e[0;${CYAN};49m"
# shellcheck disable=SC2034
CL_GREY="\e[0;${GREY};49m"
# shellcheck disable=SC2034
CL_DARK="\e[0;${DARK};49m"
# shellcheck disable=SC2034
CL_BL_RED="\e[1;${RED};49m"
# shellcheck disable=SC2034
CL_BL_GREEN="\e[1;${GREEN};49m"
# shellcheck disable=SC2034
CL_BL_YELLOW="\e[1;${YELLOW};49m"
# shellcheck disable=SC2034
CL_BL_BLUE="\e[1;${BLUE};49m"
# shellcheck disable=SC2034
CL_BL_MAG="\e[1;${MAG};49m"
# shellcheck disable=SC2034
CL_BL_CYAN="\e[1;${CYAN};49m"
# shellcheck disable=SC2034
CL_BL_GREY="\e[1;${GREY};49m"

################################################################################

SUPPORTED_OPTS="lib output !list_libs !no_color !help !version"
SHORT_OPTS="l:lib o:output L:!list_libs nc:!no_color h:!help v:!version"

################################################################################

# Main func
#
# *: All unparsed arguments passed to the script
#
# Code: No
# Echo: No
main() {
  if [[ -n "$no_color" || -n "$NO_COLOR" ]] ; then
    unset NORM BOLD UNLN RED GREEN YELLOW BLUE MAG CYAN GREY DARK
    unset CL_NORM CL_BOLD CL_UNLN CL_RED CL_GREEN CL_YELLOW CL_BLUE CL_MAG CL_CYAN CL_GREY CL_DARK
    unset CL_BL_RED CL_BL_GREEN CL_BL_YELLOW CL_BL_BLUE CL_BL_MAG CL_BL_CYAN CL_BL_GREY CL_BL_DARK
    no_color=true
  fi

  if [[ -n "$version" ]] ; then
    about
    exit 0
  fi

  if [[ -n "$help" || $# -eq 0 ]] ; then
    usage
    exit 0
  fi

  if [[ -n "$lib" && -z "$output" ]] ; then
    output="test_${lib//-/_}.c"
  fi

  if [[ -z "$output" ]] ; then
    output="test.c"
  fi

  if [[ -n "$list_libs" ]] ; then
    listLibs "$1"
  else
    generate "$1"
  fi
}

# Generate test file
#
# 1: Path to file or package name (String)
#
# Code: No
# Echo: No
generate() {
  if isPackageInstalled "$1" ; then
    generateForInstalled "$1"
  else
    if [[ -r "$1" ]] ; then
      generateForFile "$1"
    else
      error "Can't file or package with name \"$1\""
      exit 1
    fi
  fi
}

# Show list of package configs in given package
#
# 1: Path to file or package name (String)
#
# Code: No
# Echo: No
listLibs() {
  if isPackageInstalled "$1" ; then
    if rpm -ql "$1" | grep -c -q '.*/pkgconfig/.*\.pc' ; then
      echo ""
      rpm -ql "$1" | grep '.*/pkgconfig/.*\.pc' | sed 's#.*/# • #' | sed 's/.pc$//' | sort -h
      echo ""
    fi
  else
    if rpm -qlp "$1" | grep -c -q '.*/pkgconfig/.*\.pc' ; then
      echo ""
      rpm -qlp "$1" | grep '.*/pkgconfig/.*\.pc' | sed 's#.*/# • #' | sed 's/.pc$//' | sort -h
      echo ""
    fi
  fi
}

# Generate test file for RPM package
#
# 1: Path to file (String)
#
# Code: Yes
# Echo: No
generateForFile() {
  local rpm_file="$1"
  local header_files link_flags

  header_files=$(rpm -qlp "$rpm_file" | grep '/usr/include' | grep -E '\.h$' | tr '\n' ' ')
  link_flags=$(rpm -qlp "$rpm_file" | grep -oE '[a-zA-Z0-9]+.so$' | sed 's/.so$//g' | sed 's/^lib//g' | sed 's/^/-l/g' | tr '\n' ' ')
  lib_num=$(rpm -qlp "$rpm_file" | grep -c '.*/pkgconfig/.*\.pc')

  if [[ $lib_num -gt 1 ]] ; then
    warn "\n▲ Package contains more than one package configurations ($lib_num)"
  fi

  # shellcheck disable=SC2001
  link_flags=$(echo "$link_flags" | sed 's/ *$//g')

  generateBibopRecipePart "$link_flags"

  # shellcheck disable=SC2086
  generateTestFile $header_files
}

# Generate test file for installed package
#
# 1: Package name (String)
#
# Code: Yes
# Echo: No
generateForInstalled() {
  local pkg="$1"
  local header_files pkg_config lib_num link_flags

  header_files=$(rpm -ql "$pkg" | grep '/usr/include' | grep -E '\.h$' | tr '\n' ' ')
  pkg_config=$(rpm -ql "$pkg" | grep '.*/pkgconfig/.*\.pc' | sed 's#.*/##' | sed 's/.pc$//' | grep "$lib" | sort -h | head -1)
  lib_num=$(rpm -ql "$pkg" | grep -c '.*/pkgconfig/.*\.pc')

  if [[ $lib_num -gt 1 ]] ; then
    show ""
    warn "Package contains more than one package configurations ($lib_num)"
  elif [[ $lib_num -eq 0 ]] ; then
    show ""
    error "Package doesn't contain any package configurations\n"
    exit 1
  fi

  if [[ -n "$pkg_config" ]] ; then
    link_flags=$(pkg-config --cflags --libs "$pkg_config")
  else
    link_flags=$(rpm -ql "$pkg" | grep -oE '[a-zA-Z0-9]+.so$' | sed 's/.so$//g' | sed 's/^lib//g' | sed 's/^/-l/g' | tr '\n' ' ')
  fi

  # shellcheck disable=SC2001
  link_flags=$(echo "$link_flags" | sed 's/ *$//g')

  generateBibopRecipePart "$pkg_config" "$link_flags"

  # shellcheck disable=SC2086
  generateTestFile $header_files
}

# Generates part of bibop recipe
#
# 1: Linking flags
#
# Code: No
# Echo: No
generateBibopRecipePart() {
  local lib_name="$1"
  local link_flags="$2"

  local bin_name

  show "\n--------------------------------------------------------------------------------\n" $DARK

  if [[ "$output" == "test.c" ]] ; then
    echo "var lib_linking_flags \"$link_flags\""
    echo ""
    echo "command \"gcc -o test_bin {lib_linking_flags} test.c\" \"Compile binary with ${lib_name:-library}\""
    echo "  exit 0"
    echo "  exist test_bin"
    echo ""
    echo "+command \"./test_bin\" \"Execute built binary\""
    echo "  exit 0"
    echo ""
  else
    bin_name=$(echo "$output" | tr '-' '_' | sed 's/^test_//' | sed 's/\.c$//')

    echo "var ${bin_name}_linking_flags \"$link_flags\""
    echo ""
    echo "command \"gcc -o test_${bin_name}_bin {${bin_name}_linking_flags} $output\" \"Compile binary with ${lib_name:-library}\""
    echo "  exit 0"
    echo "  exist test_${bin_name}_bin"
    echo ""
    echo "+command \"./test_${bin_name}_bin\" \"Execute built binary\""
    echo "  exit 0"
    echo ""
  fi

  show "--------------------------------------------------------------------------------\n" $DARK
}

# Generates test.c file
#
# *: Header files
#
# Code: No
# Echo: No
generateTestFile() {
  local header_file header

  truncate -s 0 "$output"

  for header_file in "$@" ; do
    # shellcheck disable=SC2001
    header=$(echo "$header_file" | sed 's#/usr/include/##')

    echo "#include <$header>" >> "$output"
  done

  echo -e "\nint main() {\n  return 0;\n}" >> "$output"
}

# Check if package installed on system
#
# 1: Package name (String)
#
# Code: Yes
# Echo: No
isPackageInstalled() {
  rpm -q "$1" &> /dev/null
  return $?
}

################################################################################

# Show message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" && -z "$no_color" ]] ; then
    echo -e "\e[${2}m${1}\e[0m"
  else
    echo -e "$*"
  fi
}

# Print warning message
#
# 1: Message (String)
#
# Code: No
# Echo: No
warn() {
  show "▲ $*" $YELLOW 1>&2
}

# Print error message
#
# 1: Message (String)
#
# Code: No
# Echo: No
error() {
  show "▲ $*" $RED 1>&2
}

# Print usage info
#
# Code: No
# Echo: No
usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} $APP ${CL_GREEN}{options}${CL_NORM} devel-package"
  show ""
  show "Options" $BOLD
  show ""
  show "  ${CL_GREEN}--list-libs, -L${CL_NORM} ${CL_DARK}....${CL_NORM} List all libs in package"
  show "  ${CL_GREEN}--output, -o${CL_NORM} ${CL_GREY}name${CL_NORM} ${CL_DARK}..${CL_NORM} Output source file ${CL_DARK}(default: test.c)${CL_NORM}"
  show "  ${CL_GREEN}--lib, -l${CL_NORM} ${CL_GREY}name${CL_NORM} ${CL_DARK}.....${CL_NORM} Lib name"
  show "  ${CL_GREEN}--no-color, -nc${CL_NORM} ${CL_DARK}....${CL_NORM} Disable colors in output"
  show "  ${CL_GREEN}--help, -h${CL_NORM} ${CL_DARK}.........${CL_NORM} Show this help message"
  show "  ${CL_GREEN}--version, -v${CL_NORM} ${CL_DARK}......${CL_NORM} Show information about version"
  show ""
  show "Examples" $BOLD
  show ""
  show "  $APP dirac-devel-1.0.2-15.el7.x86_64.rpm"
  show "  Generate test.c with all required headers for RPM package" $DARK
  show ""
  show "  $APP dirac-devel"
  show "  Generate test.c with all required headers for installed package" $DARK
  show ""
}

# Show info about version
#
# Code: No
# Echo: No
about() {
  show ""
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - $DESC"
  show ""
  show "Copyright (C) 2009-$(date +%Y) ESSENTIAL KAOS" $DARK
  show "Apache License, Version 2.0 <https://www.apache.org/licenses/LICENSE-2.0>" $DARK
  show ""
}

# Show warning message about unsupported option
#
# 1: Option name (String)
#
# Code: No
# Echo: No
showOptWarn() {
  error "Unknown option $1"
  exit 1
}

## OPTIONS PARSING 6 ###########################################################

if [[ $# -eq 0 ]] ; then
  main
  exit $?
fi

unset opt optn optm optv optt optk

optv="$*" ; optt=()

while [[ -n "$1" ]] ; do
  if [[ "$1" =~ \  && -n "$optn" ]] ; then
    declare "$optn=$1"

    unset optn && shift && continue
  elif [[ $1 =~ ^-{1}[a-zA-Z0-9]{1,2}+.*$ ]] ; then
    optm=${1:1}

    if [[ \ $SHORT_OPTS\  =~ \ $optm:!?([a-zA-Z0-9_]*) ]] ; then
      opt="${BASH_REMATCH[1]}"
    else
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ -z "$optn" ]] ; then
      optn=$opt
    else
      # shellcheck disable=SC2015
      [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
      optn=$opt
    fi

    if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
      declare "$optn=true" ; unset optn ; optk=true
    else
      unset optk
    fi

    shift && continue
  elif [[ "$1" =~ ^-{2}[a-zA-Z]{1}[a-zA-Z0-9_-]+.*$ ]] ; then
    opt=${1:2}

    if [[ $opt == *=* ]] ; then
      IFS="=" read -ra opt <<< "$opt"

      optm="${opt[0]}" ; optm=${optm//-/_}

      if [[ ! $SUPPORTED_OPTS\  =~ $optm\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${opt[0]//_/-}"
        shift && continue
      fi

      # shellcheck disable=SC2015
      [[ -n "${!optm}" && $MERGEABLE_OPTS\  =~ $optm\  ]] && declare "$optm=${!optm} ${opt[*]:1:99}" || declare "$optm=${opt[*]:1:99}"

      unset optm && shift && continue
    else
      # shellcheck disable=SC2178
      opt=${opt//-/_}

      if [[ -z "$optn" ]] ; then
        # shellcheck disable=SC2128
        optn=$opt
      else
        # shellcheck disable=SC2015
        [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
        # shellcheck disable=SC2128
        optn=$opt
      fi

      if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${optn//_/-}"
        shift && continue
      fi

      if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
        declare "$optn=true" ; unset optn ; optk=true
      else
        unset optk
      fi

      shift && continue
    fi
  else
    if [[ -n "$optn" ]] ; then
      # shellcheck disable=SC2015
      [[ -n "${!optn}" && $MERGEABLE_OPTS\  =~ $optn\  ]] && declare "$optn=${!optn} $1" || declare "$optn=$1"

      unset optn && shift && continue
    fi
  fi

  optt+=("$1") ; shift
done

[[ -n "$optn" ]] && declare "$optn=true"

unset opt optn optm optk

# shellcheck disable=SC2015,SC2086
[[ -n "$KEEP_OPTS" ]] && main $optv || main "${optt[@]}"

################################################################################
