#! /usr/bin/env bash

################################################################################

APP="bibop-massive"
VER="1.12.2"
DESC="Utility for mass package testing"

################################################################################

NORM=0
BOLD=1
UNLN=4
RED=31
GREEN=32
YELLOW=33
BLUE=34
MAG=35
CYAN=36
GREY=37
DARK=90

# shellcheck disable=SC2034
CL_NORM="\e[${NORM}m"
# shellcheck disable=SC2034
CL_BOLD="\e[0;${BOLD};49m"
# shellcheck disable=SC2034
CL_UNLN="\e[0;${UNLN};49m"
# shellcheck disable=SC2034
CL_RED="\e[0;${RED};49m"
# shellcheck disable=SC2034
CL_GREEN="\e[0;${GREEN};49m"
# shellcheck disable=SC2034
CL_YELLOW="\e[0;${YELLOW};49m"
# shellcheck disable=SC2034
CL_BLUE="\e[0;${BLUE};49m"
# shellcheck disable=SC2034
CL_MAG="\e[0;${MAG};49m"
# shellcheck disable=SC2034
CL_CYAN="\e[0;${CYAN};49m"
# shellcheck disable=SC2034
CL_GREY="\e[0;${GREY};49m"
# shellcheck disable=SC2034
CL_DARK="\e[0;${DARK};49m"
# shellcheck disable=SC2034
CL_BL_RED="\e[1;${RED};49m"
# shellcheck disable=SC2034
CL_BL_GREEN="\e[1;${GREEN};49m"
# shellcheck disable=SC2034
CL_BL_YELLOW="\e[1;${YELLOW};49m"
# shellcheck disable=SC2034
CL_BL_BLUE="\e[1;${BLUE};49m"
# shellcheck disable=SC2034
CL_BL_MAG="\e[1;${MAG};49m"
# shellcheck disable=SC2034
CL_BL_CYAN="\e[1;${CYAN};49m"
# shellcheck disable=SC2034
CL_BL_GREY="\e[1;${GREY};49m"

STATUS_OK=0
STATUS_ERROR=1
STATUS_WARNING=2
STATUS_SKIPPED=3

################################################################################

PREFS_FILE="$HOME/.config/bibop-massive"
SUPPORTED_OPTS="error_dir enablerepo disablerepo log !validate !recheck
 !fresh !interrupt !barcode !no_color !help !version"
SHORT_OPTS="e:error_dir V:!validate R:!recheck ER:enablerepo DR:disablerepo
 F:!fresh l:log X:!interrupt B:!barcode nc:!no_color h:!help v:!version"
MERGEABLE_OPTS="enablerepo disablerepo"

################################################################################

SEPARATOR="--------------------------------------------------------------------------------"
CACHE_DIR="/var/tmp/bibop-massive-cache"

################################################################################

# Path to log file
log=""

# Name of OS distribution
dist=""

# List of recipes
recipes=""

# Current recipe name
cur_recipe=""

# Counters of passes and fails
pass_count=0
fail_count=0

# Max length of recipe name
max_recipe_len=0

# Path to package manager log file
pm_log=""

# Pre install transaction ID
preinstall_transaction_id=""

# Canceled flag
is_canceled=""

################################################################################

# Main function
#
# *: All unparsed arguments passed to the script
#
# Code: No
# Echo: No
main() {
  if [[ -n "$no_color" || -n "$NO_COLOR" ]] ; then
    unset NORM BOLD UNLN RED GREEN YELLOW BLUE MAG CYAN GREY DARK
    unset CL_NORM CL_BOLD CL_UNLN CL_RED CL_GREEN CL_YELLOW CL_BLUE CL_MAG CL_CYAN CL_GREY CL_DARK
    unset CL_BL_RED CL_BL_GREEN CL_BL_YELLOW CL_BL_BLUE CL_BL_MAG CL_BL_CYAN CL_BL_GREY CL_BL_DARK
    no_color=true
  fi

  if [[ -n "$version" ]] ; then
    about
    exit 0
  fi

  if [[ -n "$help" || $# -eq 0 ]] ; then
    usage
    exit 0
  fi

  checkEnv
  checkOptions
  configurePM
  configureCache
  processRecipes "$@"
  filterRecipes

  if [[ -z "$recipes" ]] ; then
    show "No recipes found" $YELLOW
    exit 0
  fi

  backupUsersInfo
  startProcessing
  restoreUsersInfo

  show ""

  if [[ $fail_count -ne 0 ]] ; then
    exit 1
  fi
}

# Check environment
#
# Code: No
# Echo: No
checkEnv() {
  if ! hasApp "bibop" ; then
    error "This app requires bibop utility"
    exit 1
  fi

  if [[ -z "$validate" ]] ; then
    if ! hasApp "yum" ; then
      if ! hasApp "dnf" ; then
        error "This app requires YUM or DNF"
        exit 1
      fi
    fi

    if [[ $(id -u) != "0" ]] ; then
      error "This app requires root privileges"
      exit 1
    fi

    dist=$(grep 'CPE_NAME' /etc/os-release | tr -d '"' | cut -d':' -f5)

    case "$dist" in
      "7"|"8"|"9") ;;
      *) error "Unknown or unsupported OS version"
         exit 1 ;;
    esac
  fi
}

# Check options before run
#
# Code: No
# Echo: No
checkOptions() {
  local repo

  for repo in $enablerepo ; do
    if ! yum repolist all -q | cut -f1 -d' ' | cut -f1 -d'/' | grep -qE "^${repo}$" ; then
      error "Can't enable repository \"${repo}\": there is no repository with this name"
      exit 1
    fi
  done

  for repo in $disablerepo ; do
    if ! yum repolist all -q | cut -f1 -d' ' | cut -f1 -d'/' | grep -qE "^${repo}$" ; then
      error "Can't disable repository \"${repo}\": there is no repository with this name"
      exit 1
    fi
  done
}

# Configure package manager (YUM/DNF) before tests
#
# Code: No
# Echo: No
configurePM() {
  if [[ -n "$validate" ]] ; then
    return
  fi

  if [[ -f "/etc/dnf/dnf.conf" ]] ; then
    pm_log="/var/log/dnf.log"
    if grep -q 'keepcache' /etc/dnf/dnf.conf ; then
      sed -i 's/keepcache=.*/keepcache=True/' /etc/dnf/dnf.conf
    else
      echo "keepcache=True" >> /etc/dnf/dnf.conf
    fi
  else
    pm_log="/var/log/yum.log"
    if grep -q 'keepcache' /etc/yum.conf ; then
      sed -i 's/keepcache=.*/keepcache=1/' /etc/yum.conf
    else
      echo "keepcache=1" >> /etc/yum.conf
    fi
  fi

  if [[ -n "$fresh" ]] ; then
    cleanPMCache true
  fi
}

# Configure cache
#
# Code: No
# Echo: No
configureCache() {
  if [[ ! -e "$CACHE_DIR" ]] ; then
    mkdir $CACHE_DIR
  fi

  if [[ -z "$recheck" ]] ; then
    rm -f $CACHE_DIR/* &> /dev/null
  fi
}

# Process source recipes
#
# *: All given recipes
#
# Code: No
# Echo: No
processRecipes() {
  local recipe recipe_list has_errors

  for recipe in "$@" ; do
    if [[ -d $recipe ]] ; then
      recipe_list=$(find "$recipe" -name "*.recipe")

      if [[ -n "$recipe_list" ]] ; then
        recipes="$recipes $recipe_list"
      fi
    elif [[ -e $recipe && $recipe = *.recipe ]]; then
      recipes="$recipes $recipe"
    else
      error "Can't use $recipe as a recipe source"
      has_errors=true
    fi
  done

  if [[ -n "$has_errors" ]] ; then
    exit 1
  fi

  if [[ -n "$recipes" ]] ; then
    recipes=$(echo "$recipes" | sed 's/^ //' | tr " " "\n" | sort -h)
  fi
}

# Remove recipes for other dists 
#
# Code: No
# Echo: No
filterRecipes() {
  local recipe recipe_list recipe_name

  recipe_list="$recipes"
  recipes=""

  for recipe in $recipe_list ; do
    if [[ -n "$dist" && -z "$validate" ]] ; then
      if [[ $recipe =~ .*-el[7-9]\.recipe$ ]] ; then
        if [[ "$recipe" != "${recipe%-el?.recipe}-el${dist}.recipe" ]] ; then
          continue
        fi
      else
        if [[ -e "${recipe%.recipe}-el${dist}.recipe" ]] ; then
          continue
        fi
      fi
    fi

    recipe_name=$(basename "$recipe" | sed 's/.recipe//')

    if [[ ${#recipe_name} -gt $max_recipe_len ]] ; then
      max_recipe_len=${#recipe_name}
    fi

    recipes="$recipes $recipe"
  done

  if [[ -n "$recipes" ]] ; then
    recipes=$(echo "$recipes" | sed 's/^ //' | tr " " "\n" | sort -h)
  fi
}

# Validate recipes
#
# Code: No
# Echo: No
validateRecipes() {
  separator

  for recipe in $recipes ; do
    validateRecipe "$recipe"
  done

  separator
}

# Starts recipes processing
#
# Code: No
# Echo: No
startProcessing() {
  if [[ $(echo "$recipes" | wc -l) -eq 1 ]] ; then
    if [[ -n "$validate" ]] ; then
      validateRecipeVerbose "$recipes"
    else
      runTestVerbose "$recipes"
    fi
  else
    if [[ -n "$validate" ]] ; then
      validateRecipes
    else
      runTests
    fi
  fi
}

# Run bibop recipes
#
# Code: No
# Echo: No
runTests() {
  local recipe start_ts end_ts

  if [[ -z "$log" ]] ; then
    log="bibop-massive-$(date +'%Y%m%d%H%M').log"
  fi

  # shellcheck disable=SC2206
  local recipes_arr=($recipes)

  log "${SEPARATOR//-/▾}"
  log "Started test suite (recipes: ${#recipes_arr[@]})"
  log "$SEPARATOR"

  start_ts=$(now)

  cleanPMCache
  printLegend

  separator

  trap cancelTrap SIGINT SIGQUIT SIGTERM

  for recipe in $recipes ; do
    runTest "$recipe"

    if [[ -n "$interrupt" && $fail_count -ne 0 ]] ; then
      break
    fi

    if [[ -n "$is_canceled" ]] ; then
      break
    fi
  done

  trap "" SIGINT SIGQUIT SIGTERM

  separator

  end_ts=$(now)
  grace_time=$(getGraceTime "$start_ts" "$end_ts")

  show "  ${CL_BOLD}Duration:${CL_NORM} ${grace_time} ${CL_DARK}|${CL_NORM} ${CL_BOLD}Recipes:${CL_NORM} ${#recipes_arr[@]} ${CL_DARK}|${CL_NORM} ${CL_BOLD}Passes:${CL_NORM} ${pass_count} ${CL_DARK}|${CL_NORM} ${CL_BOLD}Fails:${CL_NORM} ${fail_count}\n"

  log "Test suite finished (duration: ${grace_time} | pass: ${pass_count} | fail: ${fail_count})"
}

# Run bibop test
#
# 1: Recipe (String)
#
# Code: No
# Echo: No
runTest() {
  local recipe="$1"
  local require_install required_packages packages_installed
  local start_ts end_ts grace_time skip_tests status dots

  required_packages=$(bibop -L1 "$recipe")

  if [[ -n "$required_packages" ]] ; then
    require_install=true
  fi

  start_ts=$(now)
  cur_recipe=$(basename "$recipe" | sed 's/.recipe//')

  if ! isTestRequired "$cur_recipe" ; then
    return
  fi

  printf "  %${max_recipe_len}s: " "$cur_recipe"

  if [[ -n "$require_install" ]] ; then
    log "Checking files availability…"

    # shellcheck disable=SC2086
    if ! checkPackagesAvailability $required_packages ; then
      log "[ERROR] One or more required packages haven't found"

      markForRecheck "$cur_recipe"
      printStatusBullet $STATUS_SKIPPED

      require_install=""
      skip_tests=true
    fi
  fi

  if [[ -n "$require_install" ]] ; then
    # shellcheck disable=SC2086
    installPackages $required_packages

    status=$?

    if [[ $status -eq $STATUS_OK ]] ; then
      printStatusBullet $STATUS_OK
      packages_installed=true
    elif [[ $status -eq $STATUS_WARNING ]] ; then
      printStatusBullet $STATUS_WARNING
      packages_installed=true
    else
      printStatusBullet $STATUS_ERROR
    fi
  else
    printStatusBullet $STATUS_SKIPPED
  fi

  if [[ -n "$require_install" && -z "$packages_installed" ]] ; then
    printStatusBullet $STATUS_SKIPPED
    printStatusBullet $STATUS_SKIPPED
  else
    if [[ -z "$skip_tests" ]] ; then
      execRecipe "$recipe"
      status=$?

      if [[ -n "$barcode" ]] ; then
        dots=$(bibop -B "$recipe" 2> /dev/null)
      fi

      if [[ $status -ne $STATUS_OK ]] ; then
        markForRecheck "$cur_recipe"
      fi

      printStatusBullet $status
    fi

    if [[ -n "$require_install" ]] ; then
      uninstallPackages
      status=$?

      if [[ $status -ne $STATUS_OK ]] ; then
        markForRecheck "$cur_recipe"
      fi

      printStatusBullet $status
    else
      printStatusBullet $STATUS_SKIPPED
    fi
  fi

  cur_recipe=""

  log "$SEPARATOR"

  end_ts=$(now)
  grace_time=$(getGraceTime "$start_ts" "$end_ts")

  if [[ -z "$barcode" ]] ; then
    show "${CL_DARK} ($grace_time)${CL_NORM}"
  else
    show "${CL_DARK} ($grace_time)${CL_NORM} $dots"
  fi
}

# Run bibop test in verbose mode
#
# 1: Recipe (String)
#
# Code: No
# Echo: No
runTestVerbose() {
  local recipe="$1"
  local require_install required_packages test_failed wrk_dir

  cleanPMCache

  required_packages=$(bibop -L1 "$recipe")

  if [[ -n "$required_packages" ]] ; then
    require_install=true
  fi

  fail_count=1

  if [[ -n "$require_install" ]] ; then
    show ""
    show "${CL_BOLD}Required packages:${CL_NORM} ${CL_CYAN}${required_packages}${CL_NORM}"
    show ""
    show "Checking required packages availability…" $BOLD

    # shellcheck disable=SC2086
    if ! checkPackagesAvailability $required_packages ; then
      error "One or more required packages haven't found"
      return $STATUS_ERROR
    fi

    show "All required packages were found in enabled repositories!" $GREEN
  fi

  if [[ -n "$require_install" ]] ; then
    separator

    # shellcheck disable=SC2086
    if ! installPackagesVerbose $required_packages ; then
      error "Error while package installation"
      return $STATUS_ERROR
    fi
  fi

  separator

  show "Starting tests from ${CL_BL_CYAN}$recipe${CL_BOLD}…" $BOLD

  sleep 3

  if ! execRecipeVerbose "$recipe" ; then
    test_failed=true
  fi

  sleep 10

  if [[ -n "$require_install" ]] ; then
    separator

    if ! uninstallPackagesVerbose ; then
      error "Error while package uninstallation"
      return $STATUS_ERROR
    fi
  fi

  separator

  if [[ -z "$test_failed" ]] ; then
    return $STATUS_ERROR
  fi

  unset fail_count

  return $STATUS_OK
}

# Validate recipe
#
# 1: Recipe (String)
#
# Code: No
# Echo: No
validateRecipe() {
  local recipe="$1"
  local cur_recipe

  cur_recipe=$(basename "$recipe" | sed 's/.recipe//')

  printf "  %${max_recipe_len}s: " "$cur_recipe"

  if bibop -q -D -ip "$recipe" &>/dev/null ; then
    show "✔ " $GREEN
    (( pass_count++ ))
    return   
  fi

  show "✖ " $RED

  show ""
  bibop -D -ip "$recipe"
  show ""

  (( fail_count++ ))
}

# Validate recipe in verbose mode
#
# 1: Recipe (String)
#
# Code: No
# Echo: No
validateRecipeVerbose() {
  local recipe="$1"

  separator

  if ! bibop -D -ip "$recipe" ; then
    separator
    exit $STATUS_ERROR
  fi

  separator
}

# Execute bibop recipe
#
# 1: Recipe (String)
#
# Code: No
# Echo: No
execRecipe() {
  local recipe="$1"
  local opts status wrk_dir

  if [[ -n "$error_dir" ]] ; then
    opts="--error-dir $error_dir"
  fi

  wrk_dir=$(dirname "$recipe")

  log "Recipe validation…"

  # shellcheck disable=SC2086
  if bibop -q -D -d "$wrk_dir" $opts "$recipe" &>/dev/null ; then
    log "Recipe successfully validated"
  else
    log "[ERROR] Error while recipe validation"
    (( fail_count++ ))
    return $STATUS_ERROR
  fi

  log "Running bibop tests…"

  # shellcheck disable=SC2086
  if bibop -q -d "$wrk_dir" $opts "$recipe" &>/dev/null ; then
    log "Tests successfully passed"
    (( pass_count++ ))
    return $STATUS_OK
  else
    log "[ERROR] Error while executing tests"
    (( fail_count++ ))
    return $STATUS_ERROR
  fi
}

# Execute bibop recipe in verbose mode
#
# 1: Recipe (String)
#
# Code: No
# Echo: No
execRecipeVerbose() {
  local recipe="$1"
  local opts status wrk_dir

  if [[ -n "$error_dir" ]] ; then
    opts="--error-dir $error_dir"
  fi

  wrk_dir=$(dirname "$recipe")

  # shellcheck disable=SC2086
  bibop -d "$wrk_dir" $opts "$recipe"

  return $?
}

# Check required packages availability
#
# *: List of required packages
#
# Code: Yes
# Echo: No
checkPackagesAvailability() {
  local aval_list

  # shellcheck disable=SC2046
  aval_list=$(LC_ALL=C yum -q $(getPMOpts) list "$@" 2>/dev/null | grep -v ' Packages' | cut -f1 -d' ' | sed 's:\..*::' | sort -u | tr '\n' ' ' | sed 's/ $//')

  if [[ -z "$aval_list" ]] ; then
    return 1
  fi

  if ! comm -3 <(echo "$aval_list") <(echo "$*") &> /dev/null ; then
    return 1
  fi

  return 0
}

# Install required packages
#
# *: List of required packages
#
# Code: Yes
# Echo: No
installPackages() {
  local opts pkg_count tmp_output status problems

  preinstall_transaction_id=$(getLastTransactionID)

  log "Installing packages → $*"

  truncate -s 0 "$pm_log"

  tmp_output=$(mktemp)

  # shellcheck disable=SC2046
  LC_ALL=C yum -y $(getPMOpts) install "$@" &> "$tmp_output"

  status=$?

  if isPMOutputContainsProblems "$tmp_output" ; then
    problems=true
  fi

  rm -f "$tmp_output" &> /dev/null

  if [[ -n "$problems" ]] ; then
    pkg_count=$(grep -c 'Installed: ' "$pm_log")
    log "[WARN] Packages installed with problems ($pkg_count installed)"
    (( fail_count++ ))
    return $STATUS_WARNING
  elif [[ $status -eq 0 ]] ; then
    pkg_count=$(grep -c 'Installed: ' "$pm_log")
    log "Packages successfully installed ($pkg_count installed)"
    return $STATUS_OK
  else
    log "[ERROR] Error while package install"
    (( fail_count++ ))
    return $STATUS_ERROR
  fi
}

# Install required packages in verbose mode
#
# *: List of required packages
#
# Code: Yes
# Echo: No
installPackagesVerbose() {
  local pkg_list="$*"

  preinstall_transaction_id=$(getLastTransactionID)

  show "Installing ${pkg_list// /, }…\n" $BOLD

  # shellcheck disable=SC2046
  LC_ALL=C yum -y $(getPMOpts) install "$@"

  status=$?

  return $status
}

# Uninstall required packages
#
# Code: Yes
# Echo: No
uninstallPackages() {
  local pkg_count tmp_output status problems

  log "Uninstalling packages…"

  truncate -s 0 "$pm_log"

  if [[ "$preinstall_transaction_id" == "$(getLastTransactionID)" ]] ; then
    log "No packages were installed, nothing to uninstall"
    return $STATUS_OK
  fi

  tmp_output=$(mktemp)

  yum -y history undo last &> "$tmp_output"

  status=$?

  if isPMOutputContainsProblems "$tmp_output" ; then
    problems=true
  fi

  rm -f "$tmp_output" &> /dev/null

  if [[ -n "$problems" ]] ; then
    pkg_count=$(grep -c 'Erased:' "$pm_log")
    log "[WARN] Packages uninstalled with problems ($pkg_count uninstalled)"
    (( fail_count++ ))
    return $STATUS_WARNING
  elif [[ $status -eq 0 ]] ; then
    pkg_count=$(grep -c 'Erased:' "$pm_log")
    log "Packages successfully uninstalled ($pkg_count uninstalled)"
    return $STATUS_OK
  else
    log "[ERROR] Error while package uninstall"
    (( fail_count++ ))
    return $STATUS_ERROR
  fi
}

# Uninstall required packages in verbose mode
#
# Code: Yes
# Echo: No
uninstallPackagesVerbose() {
  show "Uninstalling packages…\n" $BOLD

  if [[ "$preinstall_transaction_id" == "$(getLastTransactionID)" ]] ; then
    show "No packages were installed, nothing to uninstall. Continue…" $GREY
    return $STATUS_OK
  fi

  yum -y history undo last
  
  return $?
}

# Checks package manager output for problems
#
# 1: Output file (String)
#
# Code: Yes
# Echo: No
isPMOutputContainsProblems() {
  if grep -q 'scriptlet failure' "$1" ; then
    return 0
  fi

  if grep -q 'warning: file' "$1" ; then
    return 0
  fi

  if grep -q 'warning: directory' "$1" ; then
    return 0
  fi

  return 1
}

# Check if test rerun is required
#
# 1: Recipe name (String)
#
# Code: Yes
# Echo: No
isTestRequired() {
  local recipe="$1"

  if [[ -z "$recheck" ]] ; then
    return 0
  fi

  if [[ $(find "$CACHE_DIR" -maxdepth 1 | wc -l) == "0" ]] ; then
    return 0
  fi

  if [[ -f "$CACHE_DIR/$recipe" ]] ; then
    return 0
  fi

  return 1
}

# Mark recipe for recheck
#
# 1: Recipe name (String)
#
# Code: No
# Echo: No
markForRecheck() {
  local recipe="$1"

  if [[ ! -f "$CACHE_DIR/$recipe" ]] ; then
    touch "$CACHE_DIR/$recipe"
  fi
}

# Backup users data
#
# Code: No
# Echo: No
backupUsersInfo() {
  if [[ -z "$validate" ]] ; then
    backupFile "/etc/passwd"
    backupFile "/etc/shadow"
    backupFile "/etc/group"
  fi
}

# Restore users data
#
# Code: No
# Echo: No
restoreUsersInfo() {
  if [[ -z "$validate" ]] ; then
    restoreFile "/etc/passwd"
    restoreFile "/etc/shadow"
    restoreFile "/etc/group"
  fi
}

# Backup given file
#
# 1: Path to file (String)
#
# Code: No
# Echo: No
backupFile() {
  local file="$1"

  cat "$file" > "${file}.bkp"
}

# Restore given file
#
# 1: Path to file (String)
#
# Code: No
# Echo: No
restoreFile() {
  local file="$1"

  cat "$file.bkp" > "${file}"
  rm -f "$file.bkp" &> /dev/null
}

# Clean package manager (YUM/DNF) cache
#
# 1: Full clean flag (Boolean)
#
# Code: No
# Echo: No
cleanPMCache() {
  local full="$1"

  if [[ -z "$full" ]] ; then
    # shellcheck disable=SC2046
    LC_ALL=C yum -q -y $(getPMOpts) clean expire-cache &>/dev/null
  else
    # shellcheck disable=SC2046
    LC_ALL=C yum -q -y $(getPMOpts) clean all &>/dev/null
  fi
}

# Get ID of the latest transaction in history
#
# Code: No
# Echo: ID (Number)
getLastTransactionID() {
  yum history list | grep -A2 'ID ' | tail -1 | tr -s ' ' | sed 's/^ \+//' | cut -f1 -d' '
}

# Generate list of YUM/DNF options
#
# Code: No
# Echo: Options (String)
getPMOpts() {
  local opts

  if [[ -n "$enablerepo" ]] ; then
    opts="--enablerepo=$enablerepo"
  fi

  if [[ -n "$disablerepo" ]] ; then
    opts="--disablerepo=$disablerepo $opts"
  fi

  echo "$opts"
}

# Prints status bullet
#
# 1: Status (Number)
#
# Code: No
# Echo: No
printStatusBullet() {
  local status="$1"

  case $status in
    "$STATUS_OK")       printf "${CL_GREEN}%s${CL_NORM}" "•" ;;
    "$STATUS_ERROR")    printf "${CL_RED}%s${CL_NORM}" "•" ;;
    "$STATUS_WARNING")  printf "${CL_YELLOW}%s${CL_NORM}" "•" ;;
    "$STATUS_SKIPPED")  printf "${CL_DARK}%s${CL_NORM}" "•" ;;
  esac
}

# Get current time as unix timestamp
#
# Code: No
# Echo: Timestamp (Number)
now() {
  date '+%s'
}

# Get action time in grace format (3 min 32 sec)
#
# 1: Start timestamp (Number)
# 2: End timestamp (Number)
#
# Code: No
# Echo: No
getGraceTime() {
  local start end tim sec min

  start="$1"
  end="$2"
  tim=$((end - start))

  [[ -z "$tim" || "$tim" == "0" ]] && echo "0:01" && return

  sec=$((tim % 60))
  min=$(((tim - sec)/60))

  printf "%d:%02d" "$min" "$sec"
}

# Print separator
#
# Code: No
# Echo: No
separator() {
  local win_width i sep

  win_width=$(stty size 2>/dev/null | cut -f2 -d' ')
  win_width="${win_width:-88}"

  # shellcheck disable=SC2034
  for i in $(seq 1 "$win_width") ; do
    sep="${sep}-"
  done

  show "\n${sep}\n" $GREY
}

# Print legend
#
# Code: No
# Echo: No
printLegend() {
  show "\n${CL_BOLD}Legend:${CL_NORM} ${CL_DARK}skipped${CL_NORM} ${CL_DARK}|${CL_NORM} ${CL_GREEN}passed${CL_NORM} ${CL_DARK}|${CL_NORM} ${CL_YELLOW}warning${CL_NORM} ${CL_DARK}|${CL_NORM} ${CL_RED}error${CL_NORM}"
}

# Signal trap for INT/TERM/QUIT
#
# Code: No
# Echo: No
cancelTrap() {
  is_canceled=true
}

################################################################################

# Check if some app is installed
#
# 1: Binray name (String)
#
# Code: Yes
# Echo: No
hasApp() {
  type "$1" &> /dev/null
  return $?
}

# Writes message to log file
#
# 1: Message (String)
#
# Code: No
# Echo: No
log() {
  if [[ -n "$cur_recipe" ]] ; then
    echo "[ $(date +'%Y/%m/%d %H:%M:%S.%3N') ] ($cur_recipe) $*" >> "$log"
  else
    echo "[ $(date +'%Y/%m/%d %H:%M:%S.%3N') ] $*" >> "$log"
  fi
}

# Show message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" && -z "$no_color" ]] ; then
    echo -e "\e[${2}m${1}\e[0m"
  else
    echo -e "$*"
  fi
}

# Print error message
#
# 1: Message (String)
#
# Code: No
# Echo: No
error() {
  show "▲ $*" $RED 1>&2
}

# Print usage info
#
# Code: No
# Echo: No
usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} $APP ${CL_GREEN}{options}${CL_NORM} recipe…"
  show ""
  show "Options" $BOLD
  show ""
  show "  ${CL_GREEN}--validate, -V${CL_NORM} ${CL_DARK}...........${CL_NORM} Just validate recipes"
  show "  ${CL_GREEN}--recheck, -R${CL_NORM} ${CL_DARK}............${CL_NORM} Run only failed checks"
  show "  ${CL_GREEN}--fresh, -F${CL_NORM} ${CL_DARK}..............${CL_NORM} Clean all caches before run"
  show "  ${CL_GREEN}--interrupt, -X${CL_NORM} ${CL_DARK}..........${CL_NORM} Interrupt checks after first error"
  show "  ${CL_GREEN}--barcode, -B${CL_NORM} ${CL_DARK}............${CL_NORM} Print unique barcode for every test"
  show "  ${CL_GREEN}--enablerepo, -ER${CL_NORM} ${CL_GREY}repo${CL_NORM} ${CL_DARK}...${CL_NORM} Enable repository"
  show "  ${CL_GREEN}--disablerepo, -DR${CL_NORM} ${CL_GREY}repo${CL_NORM} ${CL_DARK}..${CL_NORM} Disable repository"
  show "  ${CL_GREEN}--error-dir, -e${CL_NORM} ${CL_GREY}dir${CL_NORM} ${CL_DARK}......${CL_NORM} Path to directory with tests errors"
  show "  ${CL_GREEN}--log, -l${CL_NORM} ${CL_GREY}file${CL_NORM} ${CL_DARK}...........${CL_NORM} Path to log file"
  show "  ${CL_GREEN}--no-color, -nc${CL_NORM} ${CL_DARK}..........${CL_NORM} Disable colors in output"
  show "  ${CL_GREEN}--help, -h${CL_NORM} ${CL_DARK}...............${CL_NORM} Show this help message"
  show "  ${CL_GREEN}--version, -v${CL_NORM} ${CL_DARK}............${CL_NORM} Show information about version"
  show ""
  show "Examples" $BOLD
  show ""
  show "  $APP ~/tests/"
  show "  Run all tests in given directory" $DARK
  show ""
  show "  $APP -ER kaos-testing ~/tests/package1.recipe ~/tests/package2.recipe"
  show "  Run 2 tests with enabled repository 'kaos-testing' for installing packages" $DARK
  show ""
  show "  $APP -ER kaos-testing,epel,cbr ~/tests/package1.recipe"
  show "  Run verbose test with enabled repositories for installing packages" $DARK
  show ""
}

# Show info about version
#
# Code: No
# Echo: No
about() {
  show ""
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - $DESC"
  show ""
  show "Copyright (C) 2009-$(date +%Y) ESSENTIAL KAOS" $DARK
  show "Apache License, Version 2.0 <https://www.apache.org/licenses/LICENSE-2.0>" $DARK
  show ""
}

# Show warning message about unsupported option
#
# 1: Option name (String)
#
# Code: No
# Echo: No
showOptWarn() {
  error "Unknown option $1"
  exit 1
}

## PREFS PARSING ###############################################################

unset arg argn argp

if [[ -n "$PREFS_FILE" && -r "$PREFS_FILE" ]] ; then
  while read -r arg ; do
    [[ "$arg" =~ ^\# ]] && continue
    arg="${arg/: /:}" ; argn="${arg%:*}" ; argn="${argn//-/_}" ; argp="${arg#*:}"
    [[ $SUPPORTED_OPTS\  =~ $argn\  ]] && declare "$argn=$argp"
  done < <(awk 1 "$PREFS_FILE")

  unset arg argn argp
fi

## OPTIONS PARSING 5 ###########################################################

if [[ $# -eq 0 ]] ; then
  main
  exit $?
fi

unset opt optn optm optv optt optk

optv="$*" ; optt=""

while [[ -n "$1" ]] ; do
  if [[ "$1" =~ \  && -n "$optn" ]] ; then
    declare "$optn=$1"

    unset optn && shift && continue
  elif [[ $1 =~ ^-{1}[a-zA-Z0-9]{1,2}+.*$ ]] ; then
    optm=${1:1}

    if [[ \ $SHORT_OPTS\  =~ \ $optm:!?([a-zA-Z0-9_]*) ]] ; then
      opt="${BASH_REMATCH[1]}"
    else
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ -z "$optn" ]] ; then
      optn=$opt
    else
      # shellcheck disable=SC2015
      [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
      optn=$opt
    fi

    if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
      declare "$optn=true" ; unset optn ; optk=true
    else
      unset optk
    fi

    shift && continue
  elif [[ "$1" =~ ^-{2}[a-zA-Z]{1}[a-zA-Z0-9_-]+.*$ ]] ; then
    opt=${1:2}

    if [[ $opt == *=* ]] ; then
      IFS="=" read -ra opt <<< "$opt"

      optm="${opt[0]}" ; optm=${optm//-/_}

      if [[ ! $SUPPORTED_OPTS\  =~ $optm\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${opt[0]//_/-}"
        shift && continue
      fi

      # shellcheck disable=SC2015
      [[ -n "${!optm}" && $MERGEABLE_OPTS\  =~ $optm\  ]] && declare "$optm=${!optm} ${opt[*]:1:99}" || declare "$optm=${opt[*]:1:99}"

      unset optm && shift && continue
    else
      # shellcheck disable=SC2178
      opt=${opt//-/_}

      if [[ -z "$optn" ]] ; then
        # shellcheck disable=SC2128
        optn=$opt
      else
        # shellcheck disable=SC2015
        [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
        # shellcheck disable=SC2128
        optn=$opt
      fi

      if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${optn//_/-}"
        shift && continue
      fi

      if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
        declare "$optn=true" ; unset optn ; optk=true
      else
        unset optk
      fi

      shift && continue
    fi
  else
    if [[ -n "$optn" ]] ; then
      # shellcheck disable=SC2015
      [[ -n "${!optn}" && $MERGEABLE_OPTS\  =~ $optn\  ]] && declare "$optn=${!optn} $1" || declare "$optn=$1"

      unset optn && shift && continue
    fi
  fi

  optt="$optt $1" ; shift
done

[[ -n "$optn" ]] && declare "$optn=true"

unset opt optn optm optk

# shellcheck disable=SC2015,SC2086
[[ -n "$KEEP_OPTS" ]] && main $optv || main ${optt:1}

################################################################################
